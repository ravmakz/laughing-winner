% Generated by roxygen2 (4.0.1): do not edit by hand
\name{mlg}
\alias{mlg}
\alias{mlg.crosspop}
\alias{mlg.filter}
\alias{mlg.id}
\alias{mlg.stats}
\alias{mlg.table}
\alias{mlg.vector}
\title{Create counts, vectors, and matrices of multilocus genotypes.}
\usage{
mlg(pop, quiet = FALSE)

mlg.table(pop, sublist = "ALL", blacklist = NULL, mlgsub = NULL,
  bar = TRUE, total = FALSE, quiet = FALSE)

mlg.vector(pop)

mlg.stats(pop, threshold = 2^53, missing = "mean", memory = FALSE,
  algorithm = "farthest_neighbor", distance = "nei.dist", threads = 0,
  stats = "ALL", ...)

mlg.filter(pop, threshold = 0, missing = "mean", memory = FALSE,
  algorithm = "farthest_neighbor", distance = "nei.dist", threads = 0,
  ...)

mlg.crosspop(pop, sublist = "ALL", blacklist = NULL, mlgsub = NULL,
  indexreturn = FALSE, df = FALSE, quiet = FALSE)

mlg.id(pop)
}
\arguments{
\item{pop}{a \code{\linkS4class{genind}} or \code{\linkS4class{genclone}} object.}

\item{sublist}{a \code{vector} of population names or indices that the user
wishes to keep. Default to "ALL".}

\item{blacklist}{a \code{vector} of population names or indices that the user
wishes to discard. Default to \code{NULL}.}

\item{mlgsub}{a \code{vector} of multilocus genotype indices with which to
subset \code{mlg.table} and \code{mlg.crosspop}. NOTE: The resulting table
from \code{mlg.table} will only contain countries with those MLGs}

\item{quiet}{\code{Logical}. If FALSE, progress of functions will be printed
to the screen.}

\item{bar}{\code{logical} If \code{TRUE}, a bar graph for each population
will be displayed showing the relative abundance of each MLG within the
population.}

\item{indexreturn}{\code{logical} If \code{TRUE}, a vector will be returned
to index the columns of \code{mlg.table}.}

\item{df}{\code{logical} If \code{TRUE}, return a data frame containing the
counts of the MLGs and what countries they are in. Useful for making graphs
with \code{\link{ggplot}}.}

\item{total}{\code{logical} If \code{TRUE}, a row containing the sum of all
represented MLGs is appended to the matrix produced by mlg.table.}

\item{threshold}{the desired minimum distance between distinct genotypes.
Defaults to 0, which will only merge identical genotypes}

\item{missing}{any method to be used by \code{\link{missingno}}: "mean"
(default), "zero", "loci", "genotype", or "ignore".}

\item{memory}{whether this function should remember the last distance matrix
it generated. TRUE will attempt to reuse the last distance matrix
if the other parameters are the same. (default) FALSE will ignore any stored
matrices and not store any it generates.}

\item{algorithm}{determines the type of clustering to be done.
(default) "farthest_neighbor" merges clusters based on the maximum distance
between points in either cluster. This is the strictest of the three.
"nearest_neighbor" merges clusters based on the minimum distance between
points in either cluster. This is the loosest of the three.
"average_neighbor" merges clusters based on the average distance between
every pair of points between clusters.}

\item{distance}{a character or function defining the distance to be applied
to pop. Defaults to \code{\link{nei.dist}}. A matrix or table containing
distances between individuals (such as the output of \code{\link{nei.dist}})
is also accepted for this parameter.}

\item{threads}{The maximum number of parallel threads to be used within this
function. A value of 0 (default) will attempt to use as many threads as there
are available cores/CPUs. In most cases this is ideal. A value of 1 will force
the function to run serially, which may increase stability on some systems.
Other values may be specified, but should be used with caution.}

\item{stats}{determines which statistics this function should return on cluster
mergers. If "MLGs", this function will return a vector of cluster
assignments, similar to that of \code{\link{mlg.vector}}. If "thresholds",
the threshold at which each cluster was merged will be returned instead of
the cluster assignment. "distances" will return a distance matrix of the new
distances between each new cluster. If "sizes", the size of each remaining
cluster will be returned. Finally, "all" (default) will return a list of all 4.}

\item{...}{any parameters to be passed off to the distance method.}
}
\value{
\subsection{mlg}{
an integer describing the number of multilocus genotypes observed.
}
\subsection{mlg.table}{
a matrix with columns indicating unique multilocus genotypes and rows
indicating populations.
}
\subsection{mlg.vector}{
a numeric vector naming the multilocus genotype of each individual in
  the dataset.
}
\subsection{mlg.crosspop}{
\itemize{
\item{default}{ a \code{list} where each element contains a named integer vector representing the number of individuals represented from each population in that MLG}
\item{\code{indexreturn = TRUE}}{ a \code{vector} of integers defining the multilocus genotypes that have individuals crossing populations}
\item{\code{df = TRUE}}{ A long form data frame with the columns: MLG, Population, Count. Useful for graphing with ggplot2}
}
}
\subsection{mlg.id}{
a list of multilocus genotypes with the associated individual names per MLG.
}

a numeric vector naming the multilocus genotype of each individual in
the dataset. Each genotype is at least the specified distance apart, as
calculated by the selected algorithm. If stats is set to \code{TRUE}, this
function will return the thresholds had which each cluster merger occured
instead of the new cluster assignments.

a \link{genclone} object with the mll field updated to contain a numeric
vector naming the suspected multilocus lineage of each individual in
the dataset. Each lineage is at least the specified distance apart, as
calculated by the selected algorithm.

a \code{list} containing vectors of population names for each MLG.
}
\description{
Create counts, vectors, and matrices of multilocus genotypes.
}
\note{
The resulting matrix of \code{mlg.table} can be used for analysis with
the \code{\link{vegan}} package.

mlg.vector will recalculate the mlg vector for
  \code{\linkS4class{genind}} objects and will return the contents of the mlg
  slot in \code{\linkS4class{genclone}} objects. This means that MLGs will be
  different for subsetted \code{\linkS4class{genind}} objects.

Thresholds or distances greater than 2^53 may produce unexpected results.

\code{mlg.filter} makes use of \code{mlg.vector} grouping prior to
applying the given threshold. Therefore \code{mlg.vector} and
\code{mlg.vector} return the same vector when threshold is set to 0 or less.
}
\examples{
# Load the data set
data(Aeut)

# Investigate the number of multilocus genotypes.
amlg <- mlg(Aeut)
amlg # 119

# show the multilocus genotype vector
avec <- mlg.vector(Aeut)
avec

# Get a table
atab <- mlg.table(Aeut, bar = FALSE)
atab

# See where multilocus genotypes cross populations
acrs <- mlg.crosspop(Aeut) # MLG.59: (2 inds) Athena Mt. Vernon

# See which individuals belong to each MLG
aid <- mlg.id(Aeut)
aid["59"] # individuals 159 and 57

\dontrun{

# A simple example. 10 individuals, 5 genotypes.
mat1 <- matrix(ncol=5, 25:1)
mat1 <- rbind(mat1, mat1)
mat <- matrix(nrow=10, ncol=5, paste(mat1,mat1,sep="/"))
mat.gid <- df2genind(mat, sep="/")
mlg(mat.gid)
mlg.vector(mat.gid)
mlg.table(mat.gid)

# Now for a more complicated example.
# Data set of 1903 samples of the H3N2 flu virus genotyped at 125 SNP loci.
data(H3N2)
mlg(H3N2, quiet=FALSE)

H.vec <- mlg.vector(H3N2)

# Changing the population vector to indicate the years of each epidemic.
pop(H3N2) <- other(H3N2)$x$country
H.tab <- mlg.table(H3N2, bar=FALSE, total=TRUE)

# Show which genotypes exist accross populations in the entire dataset.
res <- mlg.crosspop(H3N2, quiet=FALSE)

# Let's say we want to visualize the multilocus genotype distribution for the
# USA and Russia
mlg.table(H3N2, sublist=c("USA", "Russia"), bar=TRUE)

# An exercise in subsetting the output of mlg.table and mlg.vector.
# First, get the indices of each MLG duplicated across populations.
inds <- mlg.crosspop(H3N2, quiet=FALSE, indexreturn=TRUE)

# Since the columns of the table from mlg.table are equal to the number of
# MLGs, we can subset with just the columns.
H.sub <- H.tab[, inds]

# We can also do the same by using the mlgsub flag.
H.sub <- mlg.table(H3N2, mlgsub=inds)

# We can subset the original data set using the output of mlg.vector to
# analyze only the MLGs that are duplicated across populations.
new.H <- H3N2[H.vec \%in\% inds, ]

}
}
\author{
Zhian N. Kamvar, Jonah Brooks
}
\seealso{
\code{\link[vegan]{diversity}} \code{\link{popsub}}
}

