\documentclass[letterpaper]{article}
%\VignetteIndexEntry{Migration from poppr version 1}
%\VignetteEngine{knitr::knitr}
\usepackage{graphicx}
\usepackage[colorlinks = true,
            urlcolor = blue,
            citecolor = blue,
            linkcolor = blue]{hyperref}
\usepackage{array}
\usepackage{color}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage[utf8]{inputenc} % for UTF-8/single quotes from sQuote()
\usepackage{fullpage}
\usepackage{mathtools}
\usepackage{makeidx}
\usepackage{longtable}

% for bold symbols in mathmode
\usepackage{bm}
\newcommand{\R}{\mathbb{R}}
\newcommand{\m}[1]{\mathbf{#1}}
\newcommand{\tab}{\hspace*{1em}}
\newcolumntype{H}{>{\setbox0=\hbox\bgroup} c<{\egroup}@{}}
\newcommand{\cmdlink}[2]{%
  \texttt{\hyperref[#1]{#2}}%
}
\newcommand{\seclink}[2]{%
  \textsc{\hyperref[#1]{#2}}%
}

\newcommand{\poppr}{\textit{poppr}}
\newcommand{\Poppr}{\textit{Poppr}}
\newcommand{\adegenet}{\textit{adegenet}}
\newcommand{\Adegenet}{\textit{Adegenet}}
\newcommand{\tline}{
  \noindent
  \rule{\textwidth}{1pt}
  \par
}
\newcommand{\bline}{
  \noindent
  \rule{\textwidth}{1pt}
  \kern1pt
}

\newcommand{\jala}{
  \includegraphics[height = 5mm, keepaspectratio=true]{jalapeno-poppers}
}

\newcommand{\revjala}{
  \scalebox{-1}[1]{\jala{}}
}

\title{Migration from poppr version 1.1 to \Sexpr{packageVersion("poppr")}}
\author{Zhian N. Kamvar$^{1}$\ and Niklaus J. Gr\"unwald$^{1,2}$\\\scriptsize{1)
Department of Botany and Plant Pathology, Oregon State University, Corvallis,
OR}\\\scriptsize{2) Horticultural Crops Research Laboratory, USDA-ARS,
Corvallis, OR}}

\begin{document}
% Set the width of figures.
\setkeys{Gin}{width=0.5\textwidth}

<<echo=FALSE, warning=FALSE>>=
knitr::opts_knit$set(out.format = "latex")
thm <- knitr::knit_theme$get("acid")
knitr::knit_theme$set(thm)
knitr::opts_chunk$set(concordance=TRUE)
# knitr::opts_chunk$set(message = FALSE, warning = FALSE)
knitr::opts_chunk$set(out.width = '0.5\\linewidth', fig.align = "center", fig.show = 'asis')
@

<<poppr_funk, eval = TRUE, echo = FALSE>>=
print_command <- function(funk){
  fargs <- formals(funk)
  
  lapply(names(fargs), function(arg_name, fargs){
    arg <- fargs[[arg_name]]
    if (missing(arg)){
      fargs[[arg_name]] <<- as.symbol(arg_name)
      names(fargs)[names(fargs) == arg_name] <<- ""
    }
  }, fargs)
  fargs$call <- as.symbol(funk)
  fargs <- fargs[c(length(fargs), 1:(length(fargs) - 1))]
  return(as.call(fargs))
}


# This is an internal function from knitr
my.color.block = function(color1 = '', color2 = '') {
  function(x, options) {
    x = gsub('\n*$', '', x)
    x = my_escape_latex(x, newlines = TRUE, spaces = TRUE)
    # babel might have problems with "; see http://stackoverflow.com/q/18125539/559676
    x = gsub('"', '"{}', x)
    sprintf('\n\n{\\ttfamily\\noindent%s%s%s}', color1, x, color2)
  }
}

# This is also an internal function from knitr
my_escape_latex = function(x, newlines = FALSE, spaces = FALSE) {
  x = gsub('\\\\', '\\\\textbackslash', x)
  x = gsub('([#$%&_{}])', '\\\\\\1', x)
  x = gsub('\\\\textbackslash', '\\\\textbackslash{}', x)
  x = gsub('~', '\\\\textasciitilde{}', x)
  x = gsub('\\^', '\\\\textasciicircum{}', x)
  if (newlines) x = gsub('(?<!\n)\n(?!\n)', '\\\\\\\\', x, perl = TRUE)
  if (spaces) x = gsub('  ', '\\\\ \\\\ ', x)
  x
}
@

\definecolor{light-gray}{gray}{0.97}
\definecolor{salmon}{HTML}{F0AAAA}

\maketitle 
\begin{abstract} 
In 2015, \adegenet{} and \poppr{} both went through major, breaking changes.
In this short vignette, we will demonstrate the \texttt{old2new\_} family of
functions that will convert your data and provide a guide of functions that have
changed name or functionality. 
\end{abstract} 
% Inserting the \Poppr{} logo here 

\begin{figure}[b]   
  \centering
  \label{logo}   
  \includegraphics{popprlogo} 
\end{figure} 

\newpage 
\begingroup
  \hypersetup{linkcolor=black} 
  \tableofcontents 
\endgroup 

%\linenumbers
\section{Introduction}

In March of 2015, a population genetics in R hackathon was held at NESCent in 
Durham, North Carolina, USA. Details can be found here: 
\url{https://github.com/NESCent/r-popgen-hackathon}. This hackthon identified 
several issues concerning population genetics in R, one of them being the need
for package efficiency. Thus, many packages, including \adegenet{} and \poppr{}
received major updates \cite{kamvar2015novel}. The side effect of these updates 
is that backwards compatibility has been broken in making \adegenet{} and 
\poppr{} more efficient.

\subsection{Major changes in \adegenet{}}

Major breaking changes involve the structure of the \adegenet{}'s \textsc{genind}
object. The \texttt{@tab} slot has been changed from containing allelic frequency
data to counts of alleles, thus reducing the size of the data by half. Several
redundant slots have also disappeared including \texttt{@pop.names}, 
\texttt{@loc.names}, and \texttt{@ind.names}. The function \texttt{na.replace()}
has been removed and modification of the data set directly is discouraged. 

\subsection{Major changes in \poppr{}}

The function \texttt{splitcombine()} has officially been removed (it was 
deprecated in version 1.1). Version 1.1 introduced the \texttt{@hierarchy} slot
to contain population hierarchies. This slot was moved to the \textsc{genind}
object and renamed to \texttt{@strata}. To make things particularly complicated,
a slot called \texttt{@hierarchy} was also added to the \textsc{genind} object,
but it only contains a formula. All methods associated with the previous
hierarchy slot (e.g. \texttt{splithierarchy()} or \texttt{setpop()}) still exist
in \poppr{} as a wrapper to the true methods. 

\section{Migrating data}

Migrating data from 1.1 to 2.0 is simple, all you have to do is use the function
\texttt{old2new\_genind()} or \texttt{old2new\_genclone()} depending on the type
of data you have. Below is an example of using these functions on old data.

\subsection{migrating genind data}

We will use the \texttt{partial\_clone} data set from \poppr{} version 1.1.5
for demonstration. First, we'll load the data.

<<old_genind, message = TRUE, warning = TRUE, error = TRUE>>=
library("poppr")
data("old_partial_clone", package = "poppr") # From version 1.1.5
data("partial_clone", package = "poppr")     # From version 2.0.0
@

Now, let's examine the names of the slots and compare it with the current 
version.

<<show_genind, message = TRUE, warning = TRUE, error = TRUE>>=
names(attributes(old_partial_clone))         # Has pop.names, ind.names, etc.
names(partial_clone)                         # Has strata slot.
# This is ultimately what we want
partial_clone
@

We can try printing the old object, but it won't work and will throw an error:

<<show_old_genind, message = TRUE, warning = TRUE, error = TRUE>>=
try(old_partial_clone)
@


To correct this we should use the function \texttt{old2new\_genind()}.

<<old2new_genind, message = TRUE, warning = TRUE, error = TRUE>>=
opc <- old2new_genind(old_partial_clone)
opc # It prints!
@

Be careful, though. \textbf{Do not use old2new\_genind more than once!}.

\subsection{migrating genclone data}

This procedure is almost exactly the same as migrating genind data. We will use
the \texttt{Pinf} data set for our demonstration.

<<old_Pinf, message = TRUE, warning = TRUE, error = TRUE>>=
data("old_Pinf", package = "poppr") # From version 1.1.5
data("Pinf", package = "poppr")     # From version 2.0.0
names(attributes(old_Pinf))         # No strata slot
names(Pinf)                         # Has strata slot
Pinf                                # What we want
@

Again, we can just use \texttt{old2new\_genclone()} to convert this. 

<<old2new_genclone, message = TRUE, warning = TRUE, error = TRUE>>=
opi <- old2new_genclone(old_Pinf)
opi # It prints!
@

\section{Hierarchy functions/accessors}

While all of the previous hierarchy functions still exist, they exist in a 
deprecated fashion and will inform you how to properly use them. For example,
if we wanted to use the old function \texttt{gethierarchy()}, it would throw a 
warning:

<<hier_warning>>=
head(gethierarchy(Pinf, ~Continent/Country)) # Throws warning
head(strata(Pinf, ~Continent/Country))       # No warning :)
@

Note, the function \texttt{setpop()} is also affected:

<<setpop_warning>>=
setpop(Pinf) <- ~Country # Ambiguous warning
setPop(Pinf) <- ~Country # No warning
@

For many of the functions where you use the assignment, it can't tell what 
arguments you supply, so it will simply suggest the new function. Below is a 
table to guide you from the old to the new functions. 

\begin{table}[h]
\centering
\label{stratatable}
\begin{tabular}{lr}
\textbf{old version} & \textbf{new version} \\ \hline
\texttt{sethierarchy()} & \texttt{strata()} \\ 
\texttt{gethierarchy()} & \texttt{strata()} \\ 
\texttt{splithierarchy()} & \texttt{splitStrata()} \\ 
\texttt{addhierarchy()} & \texttt{addStrata()} \\ 
\texttt{namehierarchy()} & \texttt{nameStrata()} \\ 
\texttt{setpop()} & \texttt{setPop()} \\ \hline
\end{tabular}
\caption{Function conversion from version 1.1 to 2.0}
\end{table}


\subsection{Additional warning}

Please read this section if you have code that directly accesses the hierarchy
or strata slot directly. An example is below:

<<hier_no, eval = FALSE>>=
myData@hierarchy <- myData@hierarchy[-2] # wat
@

If you have done such a thing, then migrating to poppr 2.0 will be a bit more 
difficult. The hierarchy slot now has a completely different meaning, as it 
will now simply contain a formula specifying which levels of the strata are
hierarchical. 

My recommendation for this situation is to go through your code and replace all
lines where \texttt{@hierarchy} is used with the proper accessors. This is much
better than other solutions \footnote{For example: a hackish way to fix your
situation is to do a search and replace through your code, replacing all
instances of \texttt{@hierarchy} with \texttt{@strata}}.

\subsubsection{Why should I use the accessors?}

While it may seem reasonable to modify a slot directly, using the accessors is 
ultimately the best way to modify your data because the accessors will always 
verify the incoming data. This is shown in the adegenet basics tutorial (See:
\texttt{adegenetTutorial("basics")}). I will show a short example here with
the Pinf data set, first I will show what happens when you don't use the
accessors:

<<Pinf_wrong_strata, error = TRUE, message = TRUE, warning = TRUE>>=
newPinf        <- Pinf
the_strata     <- head(newPinf@strata)
newPinf@strata <- the_strata     # Only setting strata for six samples!
newPinf@strata                   # How is this allowed?
try(setPop(newPinf) <- ~Country) # Oh.
@
<<echo = FALSE>>=
knitr::knit_hooks$set(message = my.color.block('\\bfseries\\color{errorcolor}{', '}'))
message(geterrmessage())
@


If we had used accessors, the error would have been caught from the start!

<<Pinf_right_strata, error = TRUE, message = TRUE, warning = TRUE>>=
the_strata       <- head(strata(Pinf))
try(strata(Pinf) <- the_strata)
@
<<echo = FALSE>>=
knitr::knit_hooks$set(message = my.color.block('\\bfseries\\color{errorcolor}{', '}'))
message(geterrmessage())
@

<<echo = FALSE>>=
knitr::knit_hooks$set(message = my.color.block('\\itshape\\color{messagecolor}{', '}'))
@

\bibliographystyle{plain}
\bibliography{the_bibliography}
\end{document}